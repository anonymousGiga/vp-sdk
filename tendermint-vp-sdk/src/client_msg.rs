use crate::types::SmState;
use crate::update_ic::{send_msg_for_smheader, send_msg_for_smstate};

pub async fn create_client(
    canister_id: &str,
    is_mainnet: bool,
    msg: Vec<u8>,
) -> Result<SmState, String> {
    let method_name = "create_client";
    let args = msg;
    send_msg_for_smstate(canister_id, method_name, args, is_mainnet)
        .await
        .map_err(|e| e.to_string())
}

pub async fn update_client(
    canister_id: &str,
    is_mainnet: bool,
    msg: Vec<u8>,
) -> Result<Vec<u8>, String> {
    let method_name = "update_client";
    let args = msg;
    send_msg_for_smheader(canister_id, method_name, args, is_mainnet)
        .await
        .map_err(|e| e.to_string())
}

#[cfg(test)]
mod tests {
    use crate::client_msg::{create_client, update_client};
    use crate::start_msg::start_vp;

    const CANISTER_ID: &str = "n4t2m-tyaaa-aaaaa-aacba-cai";

    #[test]
    fn send_client_msg_works() {
        let msg1 = vec![
            10, 35, 47, 105, 98, 99, 46, 99, 111, 114, 101, 46, 99, 108, 105, 101, 110, 116, 46,
            118, 49, 46, 77, 115, 103, 67, 114, 101, 97, 116, 101, 67, 108, 105, 101, 110, 116, 18,
            227, 2, 10, 169, 1, 10, 43, 47, 105, 98, 99, 46, 108, 105, 103, 104, 116, 99, 108, 105,
            101, 110, 116, 115, 46, 116, 101, 110, 100, 101, 114, 109, 105, 110, 116, 46, 118, 49,
            46, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 101, 18, 122, 10, 5, 105, 98, 99,
            45, 49, 18, 4, 8, 2, 16, 3, 26, 4, 8, 128, 234, 73, 34, 4, 8, 128, 223, 110, 42, 2, 8,
            40, 50, 0, 58, 4, 8, 1, 16, 15, 66, 25, 10, 9, 8, 1, 24, 1, 32, 1, 42, 1, 0, 18, 12,
            10, 2, 0, 1, 16, 33, 24, 4, 32, 12, 48, 1, 66, 25, 10, 9, 8, 1, 24, 1, 32, 1, 42, 1, 0,
            18, 12, 10, 2, 0, 1, 16, 32, 24, 1, 32, 1, 48, 1, 74, 7, 117, 112, 103, 114, 97, 100,
            101, 74, 16, 117, 112, 103, 114, 97, 100, 101, 100, 73, 66, 67, 83, 116, 97, 116, 101,
            80, 1, 88, 1, 18, 133, 1, 10, 46, 47, 105, 98, 99, 46, 108, 105, 103, 104, 116, 99,
            108, 105, 101, 110, 116, 115, 46, 116, 101, 110, 100, 101, 114, 109, 105, 110, 116, 46,
            118, 49, 46, 67, 111, 110, 115, 101, 110, 115, 117, 115, 83, 116, 97, 116, 101, 18, 83,
            10, 11, 8, 253, 167, 230, 163, 6, 16, 137, 231, 237, 26, 18, 34, 10, 32, 193, 190, 87,
            2, 220, 251, 10, 59, 33, 218, 8, 209, 137, 24, 59, 204, 24, 110, 252, 128, 130, 238,
            83, 254, 7, 77, 59, 138, 61, 140, 38, 58, 26, 32, 89, 229, 139, 187, 77, 224, 152, 207,
            86, 102, 155, 216, 148, 26, 12, 94, 101, 133, 203, 0, 76, 93, 168, 24, 143, 48, 164,
            103, 206, 43, 205, 229, 26, 45, 99, 111, 115, 109, 111, 115, 49, 108, 54, 104, 115,
            117, 52, 116, 122, 107, 108, 50, 110, 104, 117, 116, 52, 121, 118, 101, 120, 101, 97,
            51, 113, 116, 110, 121, 52, 48, 51, 108, 54, 104, 115, 109, 120, 102, 118,
        ];

        let msg2 = vec![
            10, 35, 47, 105, 98, 99, 46, 99, 111, 114, 101, 46, 99, 108, 105, 101, 110, 116, 46,
            118, 49, 46, 77, 115, 103, 85, 112, 100, 97, 116, 101, 67, 108, 105, 101, 110, 116, 18,
            188, 7, 10, 15, 48, 55, 45, 116, 101, 110, 100, 101, 114, 109, 105, 110, 116, 45, 49,
            18, 249, 6, 10, 38, 47, 105, 98, 99, 46, 108, 105, 103, 104, 116, 99, 108, 105, 101,
            110, 116, 115, 46, 116, 101, 110, 100, 101, 114, 109, 105, 110, 116, 46, 118, 49, 46,
            72, 101, 97, 100, 101, 114, 18, 206, 6, 10, 197, 4, 10, 138, 3, 10, 2, 8, 11, 18, 5,
            105, 98, 99, 45, 49, 24, 18, 34, 11, 8, 140, 168, 230, 163, 6, 16, 156, 134, 199, 72,
            42, 72, 10, 32, 233, 209, 156, 188, 175, 226, 74, 47, 84, 175, 83, 165, 231, 26, 142,
            177, 60, 217, 75, 207, 185, 211, 186, 65, 213, 245, 158, 176, 25, 210, 199, 240, 18,
            36, 8, 1, 18, 32, 152, 194, 44, 126, 1, 148, 128, 208, 9, 141, 212, 120, 219, 209, 212,
            22, 212, 145, 109, 229, 86, 208, 253, 196, 90, 196, 53, 112, 86, 108, 37, 118, 50, 32,
            247, 87, 105, 175, 69, 21, 164, 181, 166, 219, 95, 52, 136, 158, 236, 129, 51, 166,
            190, 158, 144, 30, 151, 210, 140, 5, 103, 169, 138, 164, 195, 47, 58, 32, 227, 176,
            196, 66, 152, 252, 28, 20, 154, 251, 244, 200, 153, 111, 185, 36, 39, 174, 65, 228,
            100, 155, 147, 76, 164, 149, 153, 27, 120, 82, 184, 85, 66, 32, 89, 229, 139, 187, 77,
            224, 152, 207, 86, 102, 155, 216, 148, 26, 12, 94, 101, 133, 203, 0, 76, 93, 168, 24,
            143, 48, 164, 103, 206, 43, 205, 229, 74, 32, 89, 229, 139, 187, 77, 224, 152, 207, 86,
            102, 155, 216, 148, 26, 12, 94, 101, 133, 203, 0, 76, 93, 168, 24, 143, 48, 164, 103,
            206, 43, 205, 229, 82, 32, 4, 128, 145, 188, 125, 220, 40, 63, 119, 191, 191, 145, 215,
            60, 68, 218, 88, 195, 223, 138, 156, 188, 134, 116, 5, 216, 183, 243, 218, 173, 162,
            47, 90, 32, 38, 103, 54, 184, 26, 83, 33, 216, 83, 132, 218, 235, 78, 128, 77, 77, 83,
            148, 190, 89, 140, 234, 132, 18, 187, 195, 216, 204, 125, 248, 72, 0, 98, 32, 24, 17,
            12, 75, 78, 205, 45, 12, 47, 148, 230, 238, 138, 76, 143, 48, 190, 100, 118, 87, 246,
            194, 209, 47, 80, 177, 128, 214, 203, 170, 120, 99, 106, 32, 227, 176, 196, 66, 152,
            252, 28, 20, 154, 251, 244, 200, 153, 111, 185, 36, 39, 174, 65, 228, 100, 155, 147,
            76, 164, 149, 153, 27, 120, 82, 184, 85, 114, 20, 240, 37, 110, 78, 184, 20, 94, 192,
            156, 91, 52, 170, 206, 143, 68, 198, 28, 72, 244, 67, 18, 181, 1, 8, 18, 26, 72, 10,
            32, 64, 26, 241, 136, 45, 37, 18, 225, 132, 185, 129, 95, 228, 3, 167, 104, 178, 144,
            0, 49, 252, 21, 180, 236, 8, 56, 170, 102, 74, 114, 239, 249, 18, 36, 8, 1, 18, 32,
            197, 109, 195, 123, 100, 125, 22, 72, 118, 88, 241, 199, 222, 195, 55, 85, 162, 12, 75,
            179, 50, 155, 158, 217, 22, 218, 255, 136, 219, 153, 135, 186, 34, 103, 8, 2, 18, 20,
            240, 37, 110, 78, 184, 20, 94, 192, 156, 91, 52, 170, 206, 143, 68, 198, 28, 72, 244,
            67, 26, 11, 8, 145, 168, 230, 163, 6, 16, 237, 129, 190, 88, 34, 64, 108, 248, 47, 189,
            189, 174, 1, 183, 36, 165, 140, 41, 106, 33, 41, 78, 126, 181, 252, 136, 239, 95, 173,
            11, 90, 38, 67, 223, 151, 59, 140, 80, 186, 242, 255, 8, 238, 35, 207, 225, 108, 137,
            173, 162, 130, 105, 11, 201, 104, 33, 100, 180, 236, 193, 9, 180, 227, 59, 135, 33,
            199, 31, 125, 4, 18, 126, 10, 60, 10, 20, 240, 37, 110, 78, 184, 20, 94, 192, 156, 91,
            52, 170, 206, 143, 68, 198, 28, 72, 244, 67, 18, 34, 10, 32, 203, 113, 22, 11, 109,
            211, 143, 233, 195, 129, 60, 86, 70, 114, 32, 109, 94, 80, 152, 230, 100, 121, 131,
            154, 139, 197, 131, 221, 23, 45, 200, 100, 24, 10, 18, 60, 10, 20, 240, 37, 110, 78,
            184, 20, 94, 192, 156, 91, 52, 170, 206, 143, 68, 198, 28, 72, 244, 67, 18, 34, 10, 32,
            203, 113, 22, 11, 109, 211, 143, 233, 195, 129, 60, 86, 70, 114, 32, 109, 94, 80, 152,
            230, 100, 121, 131, 154, 139, 197, 131, 221, 23, 45, 200, 100, 24, 10, 24, 10, 26, 4,
            8, 1, 16, 15, 34, 126, 10, 60, 10, 20, 240, 37, 110, 78, 184, 20, 94, 192, 156, 91, 52,
            170, 206, 143, 68, 198, 28, 72, 244, 67, 18, 34, 10, 32, 203, 113, 22, 11, 109, 211,
            143, 233, 195, 129, 60, 86, 70, 114, 32, 109, 94, 80, 152, 230, 100, 121, 131, 154,
            139, 197, 131, 221, 23, 45, 200, 100, 24, 10, 18, 60, 10, 20, 240, 37, 110, 78, 184,
            20, 94, 192, 156, 91, 52, 170, 206, 143, 68, 198, 28, 72, 244, 67, 18, 34, 10, 32, 203,
            113, 22, 11, 109, 211, 143, 233, 195, 129, 60, 86, 70, 114, 32, 109, 94, 80, 152, 230,
            100, 121, 131, 154, 139, 197, 131, 221, 23, 45, 200, 100, 24, 10, 24, 10, 26, 45, 99,
            111, 115, 109, 111, 115, 49, 108, 54, 104, 115, 117, 52, 116, 122, 107, 108, 50, 110,
            104, 117, 116, 52, 121, 118, 101, 120, 101, 97, 51, 113, 116, 110, 121, 52, 48, 51,
            108, 54, 104, 115, 109, 120, 102, 118,
        ];
        tokio::runtime::Runtime::new().unwrap().block_on(async {
            let ret = start_vp(CANISTER_ID, false).await;
            assert!(ret.is_ok());

            let ret = create_client(CANISTER_ID, false, msg1).await;
            assert!(ret.is_ok());

            let ret = update_client(CANISTER_ID, false, msg2).await;
            assert!(ret.is_ok());
        });
    }
}
